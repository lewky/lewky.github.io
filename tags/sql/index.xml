<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SQL - 标签 - Yulin Lewis' Blog</title><link>https://lewky.cn/tags/sql/</link><description>SQL - 标签 - Yulin Lewis' Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>1019175915@qq.com (雨临Lewis)</managingEditor><webMaster>1019175915@qq.com (雨临Lewis)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 17 Aug 2021 23:21:30 +0800</lastBuildDate><atom:link href="https://lewky.cn/tags/sql/" rel="self" type="application/rss+xml"/><item><title>LeetCode - SQL题目</title><link>https://lewky.cn/posts/leetcode-sql/</link><pubDate>Tue, 17 Aug 2021 23:21:30 +0800</pubDate><author>文章作者</author><guid>https://lewky.cn/posts/leetcode-sql/</guid><description><![CDATA[<h2 id="627-swap-salary">627. Swap Salary</h2>
<h3 id="题目">题目</h3>
<p><a href="https://leetcode.com/problems/swap-salary/description/">https://leetcode.com/problems/swap-salary/description/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Salary table:
+----+------+-----+--------+
| id | name | sex | salary |
+----+------+-----+--------+
| 1  | A    | m   | 2500   |
| 2  | B    | f   | 1500   |
| 3  | C    | m   | 5500   |
| 4  | D    | f   | 500    |
+----+------+-----+--------+

Result table:
+----+------+-----+--------+
| id | name | sex | salary |
+----+------+-----+--------+
| 1  | A    | f   | 2500   |
| 2  | B    | m   | 1500   |
| 3  | C    | f   | 5500   |
| 4  | D    | m   | 500    |
+----+------+-----+--------+
(1, A) and (3, C) were changed from &#39;m&#39; to &#39;f&#39;.
(2, B) and (4, D) were changed from &#39;f&#39; to &#39;m&#39;.
</code></pre></td></tr></table>
</div>
</div><p>sex字段是枚举类型，只有m和f两种值，现在要求只能用一个简单的update语句来将表中数据的sex字段的值对调，即m变为f，f变为m；不允许使用select之类的语句。</p>]]></description></item><item><title>SQL - where条件里的!=会过滤值为null的数据</title><link>https://lewky.cn/posts/949c02c.html/</link><pubDate>Tue, 12 Nov 2019 23:39:42 +0800</pubDate><author>文章作者</author><guid>https://lewky.cn/posts/949c02c.html/</guid><description><![CDATA[<h2 id="会过滤值为null的数据">!=会过滤值为null的数据</h2>
<p>在测试数据时忽然发现，使用如下的SQL是无法查询到对应column为null的数据的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">test</span> <span class="k">where</span> <span class="n">name</span> <span class="o">!=</span> <span class="s1">&#39;Lewis&#39;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>SQL - 单引号和双引号的区别</title><link>https://lewky.cn/posts/8600baa4.html/</link><pubDate>Wed, 01 Aug 2018 22:21:18 +0800</pubDate><author>文章作者</author><guid>https://lewky.cn/posts/8600baa4.html/</guid><description><![CDATA[<p>原文转载至：<a href="https://segmentfault.com/q/1010000000236690" target="_blank" rel="noopener noreffer">SQL中的单引号和双引号有区别吗？</a></p>
<blockquote>
<p>在标准 SQL 中，字符串使用的是单引号。</p>
<p>如果字符串本身也包括单引号，则使用两个单引号（注意，不是双引号，字符串中的双引号不需要另外转义）。</p>
</blockquote>]]></description></item><item><title>SQL - nulls值排序问题</title><link>https://lewky.cn/posts/419004ef.html/</link><pubDate>Thu, 26 Jul 2018 00:37:49 +0800</pubDate><author>文章作者</author><guid>https://lewky.cn/posts/419004ef.html/</guid><description><![CDATA[<h2 id="给字段排序时遇到的null值问题">给字段排序时遇到的null值问题</h2>
<p>当我们使用<code>order by</code>来为指定的字段进行排序时，如果db中该字段的值存在着null值，那么在排序时这些null值会不会参与排序呢？如果参与排序的话，又是以怎样的标准来排序？</p>
<p>在不同的DB中，对于null值的默认值不同。</p>]]></description></item><item><title>SQL - ROW_NUMBER() OVER()函数</title><link>https://lewky.cn/posts/d8914798.html/</link><pubDate>Mon, 22 Jan 2018 23:34:59 +0800</pubDate><author>文章作者</author><guid>https://lewky.cn/posts/d8914798.html/</guid><description>&lt;p>ROW_NUMBER() OVER()函数用来为每条记录返回一个行号，可以用来对记录进行排序并返回该序号，序号从1开始排序。&lt;/p>
&lt;p>这里的over()是聚集函数，可以给记录进行分组、排序；row_number()不能单独使用，必须搭配over()才能使用，否则会报错。&lt;/p></description></item><item><title>SQL - on和where的区别</title><link>https://lewky.cn/posts/sql-on-where.html/</link><pubDate>Sat, 14 Oct 2017 13:53:59 +0800</pubDate><author>文章作者</author><guid>https://lewky.cn/posts/sql-on-where.html/</guid><description><![CDATA[<h2 id="on和where的区别">on和where的区别</h2>
<p>on和where后都表示查询条件，它们的区别如下：</p>
<p>1、on只能用于连接查询（内连接、外连接、交叉连接），在其他情况下使用on会报错，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="o">*</span> <span class="k">from</span> <span class="n">test</span> <span class="k">on</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">-- 报错，不能在普通查询里使用on，需要使用where
</span></code></pre></td></tr></table>
</div>
</div><p>2、连接查询会产生一张中间表(临时表)，on是在生成中间表时使用的条件；而where是在中间表生成后对中间表进行过滤使用的条件。比如：</p>]]></description></item></channel></rss>