<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>面经 - 标签 - Yulin Lewis' Blog</title><link>https://lewky.cn/tags/%E9%9D%A2%E7%BB%8F/</link><description>面经 - 标签 - Yulin Lewis' Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>1019175915@qq.com (雨临Lewis)</managingEditor><webMaster>1019175915@qq.com (雨临Lewis)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 04 Jan 2021 21:04:37 +0800</lastBuildDate><atom:link href="https://lewky.cn/tags/%E9%9D%A2%E7%BB%8F/" rel="self" type="application/rss+xml"/><item><title>Jave基础复习总纲</title><link>https://lewky.cn/posts/exam-java.html/</link><pubDate>Mon, 04 Jan 2021 21:04:37 +0800</pubDate><author>文章作者</author><guid>https://lewky.cn/posts/exam-java.html/</guid><description><![CDATA[<h2 id="java的数据结构有哪些">Java的数据结构有哪些？</h2>
<ol>
<li>线性表（ArrayList）</li>
<li>链表（LinkedList）</li>
<li>栈（Stack）</li>
<li>队列（Queue）</li>
<li>图（Map）</li>
<li>树（Tree）</li>
</ol>
<h2 id="面向对象的特征有哪些方面">面向对象的特征有哪些方面</h2>
<ol>
<li>抽象：找共性，将一类对象的共同特征总结出来构造类的过程, 包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的具体细节。</li>
<li>继承：子类继承父类的所有属性和方法，可以重用，也可以覆盖。</li>
<li>封装：把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。隐藏一切可隐藏的东西，只向外界提供最简单的编程接口。</li>
<li>多态性：分编译时的多态性和运行时的多态性。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。
要实现运行时的多态要满足：
<ul>
<li>方法重写，即子类重写父类的方法</li>
<li>对象造型，即父类引用引用子类对象</li>
</ul>
</li>
</ol>
<h2 id="i与i的区别">++i与i++的区别</h2>
<ul>
<li>i++：先赋值，后计算</li>
<li>++i：先计算，后赋值</li>
</ul>
<h2 id="程序的结构有那些">程序的结构有那些</h2>
<ul>
<li>顺序结构</li>
<li>选择结构</li>
<li>循环结构</li>
</ul>
<h2 id="数组实例化有几种方式">数组实例化有几种方式</h2>
<p>静态实例化：创建数组的时候已经指定数组中的元素。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="o">[]</span> <span class="n">a</span><span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span> <span class="n">1</span> <span class="o">,</span> <span class="n">3</span> <span class="o">,</span> <span class="n">3</span><span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>动态实例化：实例化数组的时候，只指定了数组长度，数组中所有元素都是数组类型的默认值。</p>
<h2 id="java常用包有那些">Java常用包有那些</h2>
<ul>
<li>java.lang</li>
<li>java.io</li>
<li>java.sql</li>
<li>java.util</li>
<li>java.net</li>
<li>java.math</li>
</ul>
<h2 id="形参与实参区别">形参与实参区别</h2>
<h3 id="实参argument">实参(argument)</h3>
<p>全称为&quot;实际参数&rdquo;，是在调用时传递给函数的参数。在进行函数调用时，实参必须具有确定的值，以便把这些值传送给形参。</p>
<h3 id="形参parameter">形参(parameter)</h3>
<p>全称为&quot;形式参数&rdquo;，由于它不是实际存在的变量，所以又称虚拟变量。是在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传入的参数。在调用函数时，实参将赋值给形参。因而，必须注意实参的个数、类型应与形参一一对应，并且实参必须要有确定的值。</p>]]></description></item></channel></rss>